<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="634" onload="init(evt)" viewBox="0 0 1200 634" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="634" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">/Users/oliclive-griffin/.asdf/installs/python/3.12.3/bin/py-spy record -o fg.svg -p 5125</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="623.00"> </text><svg id="frames" x="10" width="1180" total_samples="1787"><g><title>run_with_cache (transformer_lens/hook_points.py:563) (3 samples, 0.17%)</title><rect x="0.0000%" y="372" width="0.1679%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="3"/><text x="0.2500%" y="382.50"></text></g><g><title>__exit__ (contextlib.py:144) (3 samples, 0.17%)</title><rect x="0.0000%" y="388" width="0.1679%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="3"/><text x="0.2500%" y="398.50"></text></g><g><title>hooks (transformer_lens/hook_points.py:414) (3 samples, 0.17%)</title><rect x="0.0000%" y="404" width="0.1679%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="3"/><text x="0.2500%" y="414.50"></text></g><g><title>reset_hooks (transformer_lens/hook_points.py:253) (3 samples, 0.17%)</title><rect x="0.0000%" y="420" width="0.1679%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="3"/><text x="0.2500%" y="430.50"></text></g><g><title>remove_all_hook_fns (transformer_lens/hook_points.py:238) (3 samples, 0.17%)</title><rect x="0.0000%" y="436" width="0.1679%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="3"/><text x="0.2500%" y="446.50"></text></g><g><title>remove_hooks (transformer_lens/hook_points.py:157) (2 samples, 0.11%)</title><rect x="0.0560%" y="452" width="0.1119%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="2"/><text x="0.3060%" y="462.50"></text></g><g><title>forward (transformer_lens/HookedTransformer.py:583) (2 samples, 0.11%)</title><rect x="0.1679%" y="420" width="0.1119%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="2"/><text x="0.4179%" y="430.50"></text></g><g><title>input_to_embed (transformer_lens/HookedTransformer.py:376) (2 samples, 0.11%)</title><rect x="0.1679%" y="436" width="0.1119%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="2"/><text x="0.4179%" y="446.50"></text></g><g><title>__len__ (transformers/tokenization_utils_fast.py:279) (2 samples, 0.11%)</title><rect x="0.1679%" y="452" width="0.1119%" height="15" fill="rgb(218,30,26)" fg:x="3" fg:w="2"/><text x="0.4179%" y="462.50"></text></g><g><title>calculate_qkv_matrices (transformer_lens/components/abstract_attention.py:366) (4 samples, 0.22%)</title><rect x="0.3917%" y="532" width="0.2238%" height="15" fill="rgb(220,122,19)" fg:x="7" fg:w="4"/><text x="0.6417%" y="542.50"></text></g><g><title>calculate_qkv_matrices (transformer_lens/components/abstract_attention.py:383) (2 samples, 0.11%)</title><rect x="0.6156%" y="532" width="0.1119%" height="15" fill="rgb(250,228,42)" fg:x="11" fg:w="2"/><text x="0.8656%" y="542.50"></text></g><g><title>simple_attn_linear (transformer_lens/utilities/attention.py:27) (2 samples, 0.11%)</title><rect x="0.6156%" y="548" width="0.1119%" height="15" fill="rgb(240,193,28)" fg:x="11" fg:w="2"/><text x="0.8656%" y="558.50"></text></g><g><title>forward (transformer_lens/components/abstract_attention.py:196) (7 samples, 0.39%)</title><rect x="0.3917%" y="516" width="0.3917%" height="15" fill="rgb(216,20,37)" fg:x="7" fg:w="7"/><text x="0.6417%" y="526.50"></text></g><g><title>apply_rotary (transformer_lens/components/abstract_attention.py:577) (56 samples, 3.13%)</title><rect x="0.9513%" y="532" width="3.1337%" height="15" fill="rgb(206,188,39)" fg:x="17" fg:w="56"/><text x="1.2013%" y="542.50">app..</text></g><g><title>forward (transformer_lens/components/abstract_attention.py:207) (95 samples, 5.32%)</title><rect x="0.7834%" y="516" width="5.3162%" height="15" fill="rgb(217,207,13)" fg:x="14" fg:w="95"/><text x="1.0334%" y="526.50">forward..</text></g><g><title>apply_rotary (transformer_lens/components/abstract_attention.py:585) (36 samples, 2.01%)</title><rect x="4.0851%" y="532" width="2.0145%" height="15" fill="rgb(231,73,38)" fg:x="73" fg:w="36"/><text x="4.3351%" y="542.50">a..</text></g><g><title>apply_rotary (transformer_lens/components/abstract_attention.py:572) (2 samples, 0.11%)</title><rect x="6.1556%" y="532" width="0.1119%" height="15" fill="rgb(225,20,46)" fg:x="110" fg:w="2"/><text x="6.4056%" y="542.50"></text></g><g><title>apply_rotary (transformer_lens/components/abstract_attention.py:577) (2 samples, 0.11%)</title><rect x="6.3234%" y="532" width="0.1119%" height="15" fill="rgb(210,31,41)" fg:x="113" fg:w="2"/><text x="6.5734%" y="542.50"></text></g><g><title>forward (transformer_lens/components/abstract_attention.py:209) (11 samples, 0.62%)</title><rect x="6.0996%" y="516" width="0.6156%" height="15" fill="rgb(221,200,47)" fg:x="109" fg:w="11"/><text x="6.3496%" y="526.50"></text></g><g><title>apply_rotary (transformer_lens/components/abstract_attention.py:585) (5 samples, 0.28%)</title><rect x="6.4354%" y="532" width="0.2798%" height="15" fill="rgb(226,26,5)" fg:x="115" fg:w="5"/><text x="6.6854%" y="542.50"></text></g><g><title>forward (transformer_lens/components/abstract_attention.py:215) (7 samples, 0.39%)</title><rect x="6.7152%" y="516" width="0.3917%" height="15" fill="rgb(249,33,26)" fg:x="120" fg:w="7"/><text x="6.9652%" y="526.50"></text></g><g><title>forward (transformer_lens/components/abstract_attention.py:217) (33 samples, 1.85%)</title><rect x="7.1069%" y="516" width="1.8467%" height="15" fill="rgb(235,183,28)" fg:x="127" fg:w="33"/><text x="7.3569%" y="526.50">f..</text></g><g><title>calculate_attention_scores (transformer_lens/components/abstract_attention.py:419) (33 samples, 1.85%)</title><rect x="7.1069%" y="532" width="1.8467%" height="15" fill="rgb(221,5,38)" fg:x="127" fg:w="33"/><text x="7.3569%" y="542.50">c..</text></g><g><title>forward (transformer_lens/components/abstract_attention.py:252) (19 samples, 1.06%)</title><rect x="8.9536%" y="516" width="1.0632%" height="15" fill="rgb(247,18,42)" fg:x="160" fg:w="19"/><text x="9.2036%" y="526.50"></text></g><g><title>apply_causal_mask (transformer_lens/components/abstract_attention.py:479) (18 samples, 1.01%)</title><rect x="9.0095%" y="532" width="1.0073%" height="15" fill="rgb(241,131,45)" fg:x="161" fg:w="18"/><text x="9.2595%" y="542.50"></text></g><g><title>forward (transformer_lens/components/abstract_attention.py:259) (16 samples, 0.90%)</title><rect x="10.0168%" y="516" width="0.8954%" height="15" fill="rgb(249,31,29)" fg:x="179" fg:w="16"/><text x="10.2668%" y="526.50"></text></g><g><title>softmax (torch/nn/functional.py:2140) (16 samples, 0.90%)</title><rect x="10.0168%" y="532" width="0.8954%" height="15" fill="rgb(225,111,53)" fg:x="179" fg:w="16"/><text x="10.2668%" y="542.50"></text></g><g><title>forward (transformer_lens/components/abstract_attention.py:260) (47 samples, 2.63%)</title><rect x="10.9121%" y="516" width="2.6301%" height="15" fill="rgb(238,160,17)" fg:x="195" fg:w="47"/><text x="11.1621%" y="526.50">fo..</text></g><g><title>forward (transformer_lens/components/abstract_attention.py:262) (24 samples, 1.34%)</title><rect x="13.5982%" y="516" width="1.3430%" height="15" fill="rgb(214,148,48)" fg:x="243" fg:w="24"/><text x="13.8482%" y="526.50"></text></g><g><title>calculate_z_scores (transformer_lens/components/abstract_attention.py:431) (2 samples, 0.11%)</title><rect x="14.9412%" y="532" width="0.1119%" height="15" fill="rgb(232,36,49)" fg:x="267" fg:w="2"/><text x="15.1912%" y="542.50"></text></g><g><title>rearrange (einops/einops.py:600) (2 samples, 0.11%)</title><rect x="14.9412%" y="548" width="0.1119%" height="15" fill="rgb(209,103,24)" fg:x="267" fg:w="2"/><text x="15.1912%" y="558.50"></text></g><g><title>reduce (einops/einops.py:532) (2 samples, 0.11%)</title><rect x="14.9412%" y="564" width="0.1119%" height="15" fill="rgb(229,88,8)" fg:x="267" fg:w="2"/><text x="15.1912%" y="574.50"></text></g><g><title>_apply_recipe (einops/einops.py:245) (2 samples, 0.11%)</title><rect x="14.9412%" y="580" width="0.1119%" height="15" fill="rgb(213,181,19)" fg:x="267" fg:w="2"/><text x="15.1912%" y="590.50"></text></g><g><title>transpose (einops/_backends.py:258) (2 samples, 0.11%)</title><rect x="14.9412%" y="596" width="0.1119%" height="15" fill="rgb(254,191,54)" fg:x="267" fg:w="2"/><text x="15.1912%" y="606.50"></text></g><g><title>forward (transformer_lens/components/abstract_attention.py:264) (3 samples, 0.17%)</title><rect x="14.9412%" y="516" width="0.1679%" height="15" fill="rgb(241,83,37)" fg:x="267" fg:w="3"/><text x="15.1912%" y="526.50"></text></g><g><title>forward (transformer_lens/components/transformer_block.py:160) (271 samples, 15.17%)</title><rect x="0.3917%" y="468" width="15.1651%" height="15" fill="rgb(233,36,39)" fg:x="7" fg:w="271"/><text x="0.6417%" y="478.50">forward (transformer_le..</text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1739) (271 samples, 15.17%)</title><rect x="0.3917%" y="484" width="15.1651%" height="15" fill="rgb(226,3,54)" fg:x="7" fg:w="271"/><text x="0.6417%" y="494.50">_wrapped_call_impl (tor..</text></g><g><title>_call_impl (torch/nn/modules/module.py:1750) (271 samples, 15.17%)</title><rect x="0.3917%" y="500" width="15.1651%" height="15" fill="rgb(245,192,40)" fg:x="7" fg:w="271"/><text x="0.6417%" y="510.50">_call_impl (torch/nn/mo..</text></g><g><title>forward (transformer_lens/components/abstract_attention.py:291) (8 samples, 0.45%)</title><rect x="15.1091%" y="516" width="0.4477%" height="15" fill="rgb(238,167,29)" fg:x="270" fg:w="8"/><text x="15.3591%" y="526.50"></text></g><g><title>forward (transformer_lens/components/layer_norm.py:49) (122 samples, 6.83%)</title><rect x="15.5568%" y="516" width="6.8271%" height="15" fill="rgb(232,182,51)" fg:x="278" fg:w="122"/><text x="15.8068%" y="526.50">forward (..</text></g><g><title>forward (transformer_lens/components/layer_norm.py:51) (3 samples, 0.17%)</title><rect x="22.3839%" y="516" width="0.1679%" height="15" fill="rgb(231,60,39)" fg:x="400" fg:w="3"/><text x="22.6339%" y="526.50"></text></g><g><title>forward (transformer_lens/components/layer_norm.py:53) (8 samples, 0.45%)</title><rect x="22.5518%" y="516" width="0.4477%" height="15" fill="rgb(208,69,12)" fg:x="403" fg:w="8"/><text x="22.8018%" y="526.50"></text></g><g><title>forward (transformer_lens/components/transformer_block.py:161) (145 samples, 8.11%)</title><rect x="15.5568%" y="468" width="8.1142%" height="15" fill="rgb(235,93,37)" fg:x="278" fg:w="145"/><text x="15.8068%" y="478.50">forward (tr..</text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1739) (145 samples, 8.11%)</title><rect x="15.5568%" y="484" width="8.1142%" height="15" fill="rgb(213,116,39)" fg:x="278" fg:w="145"/><text x="15.8068%" y="494.50">_wrapped_ca..</text></g><g><title>_call_impl (torch/nn/modules/module.py:1750) (145 samples, 8.11%)</title><rect x="15.5568%" y="500" width="8.1142%" height="15" fill="rgb(222,207,29)" fg:x="278" fg:w="145"/><text x="15.8068%" y="510.50">_call_impl ..</text></g><g><title>forward (transformer_lens/components/layer_norm.py:56) (12 samples, 0.67%)</title><rect x="22.9994%" y="516" width="0.6715%" height="15" fill="rgb(206,96,30)" fg:x="411" fg:w="12"/><text x="23.2494%" y="526.50"></text></g><g><title>forward (transformer_lens/components/layer_norm.py:49) (2 samples, 0.11%)</title><rect x="23.7269%" y="516" width="0.1119%" height="15" fill="rgb(218,138,4)" fg:x="424" fg:w="2"/><text x="23.9769%" y="526.50"></text></g><g><title>forward (transformer_lens/components/transformer_block.py:163) (15 samples, 0.84%)</title><rect x="23.6710%" y="468" width="0.8394%" height="15" fill="rgb(250,191,14)" fg:x="423" fg:w="15"/><text x="23.9210%" y="478.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1739) (15 samples, 0.84%)</title><rect x="23.6710%" y="484" width="0.8394%" height="15" fill="rgb(239,60,40)" fg:x="423" fg:w="15"/><text x="23.9210%" y="494.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1750) (15 samples, 0.84%)</title><rect x="23.6710%" y="500" width="0.8394%" height="15" fill="rgb(206,27,48)" fg:x="423" fg:w="15"/><text x="23.9210%" y="510.50"></text></g><g><title>forward (transformer_lens/components/layer_norm.py:56) (10 samples, 0.56%)</title><rect x="23.9508%" y="516" width="0.5596%" height="15" fill="rgb(225,35,8)" fg:x="428" fg:w="10"/><text x="24.2008%" y="526.50"></text></g><g><title>forward (transformer_lens/components/layer_norm.py:49) (5 samples, 0.28%)</title><rect x="24.5104%" y="516" width="0.2798%" height="15" fill="rgb(250,213,24)" fg:x="438" fg:w="5"/><text x="24.7604%" y="526.50"></text></g><g><title>forward (transformer_lens/components/layer_norm.py:51) (2 samples, 0.11%)</title><rect x="24.7902%" y="516" width="0.1119%" height="15" fill="rgb(247,123,22)" fg:x="443" fg:w="2"/><text x="25.0402%" y="526.50"></text></g><g><title>forward (transformer_lens/components/layer_norm.py:53) (4 samples, 0.22%)</title><rect x="24.9021%" y="516" width="0.2238%" height="15" fill="rgb(231,138,38)" fg:x="445" fg:w="4"/><text x="25.1521%" y="526.50"></text></g><g><title>forward (transformer_lens/components/transformer_block.py:165) (23 samples, 1.29%)</title><rect x="24.5104%" y="468" width="1.2871%" height="15" fill="rgb(231,145,46)" fg:x="438" fg:w="23"/><text x="24.7604%" y="478.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1739) (23 samples, 1.29%)</title><rect x="24.5104%" y="484" width="1.2871%" height="15" fill="rgb(251,118,11)" fg:x="438" fg:w="23"/><text x="24.7604%" y="494.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1750) (23 samples, 1.29%)</title><rect x="24.5104%" y="500" width="1.2871%" height="15" fill="rgb(217,147,25)" fg:x="438" fg:w="23"/><text x="24.7604%" y="510.50"></text></g><g><title>forward (transformer_lens/components/layer_norm.py:56) (11 samples, 0.62%)</title><rect x="25.1819%" y="516" width="0.6156%" height="15" fill="rgb(247,81,37)" fg:x="450" fg:w="11"/><text x="25.4319%" y="526.50"></text></g><g><title>forward (transformer_lens/components/layer_norm.py:51) (79 samples, 4.42%)</title><rect x="25.7974%" y="516" width="4.4208%" height="15" fill="rgb(209,12,38)" fg:x="461" fg:w="79"/><text x="26.0474%" y="526.50">forwa..</text></g><g><title>forward (transformer_lens/components/layer_norm.py:53) (3 samples, 0.17%)</title><rect x="30.2182%" y="516" width="0.1679%" height="15" fill="rgb(227,1,9)" fg:x="540" fg:w="3"/><text x="30.4682%" y="526.50"></text></g><g><title>forward (transformer_lens/components/transformer_block.py:192) (90 samples, 5.04%)</title><rect x="25.7974%" y="468" width="5.0364%" height="15" fill="rgb(248,47,43)" fg:x="461" fg:w="90"/><text x="26.0474%" y="478.50">forwar..</text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1739) (90 samples, 5.04%)</title><rect x="25.7974%" y="484" width="5.0364%" height="15" fill="rgb(221,10,30)" fg:x="461" fg:w="90"/><text x="26.0474%" y="494.50">_wrapp..</text></g><g><title>_call_impl (torch/nn/modules/module.py:1750) (90 samples, 5.04%)</title><rect x="25.7974%" y="500" width="5.0364%" height="15" fill="rgb(210,229,1)" fg:x="461" fg:w="90"/><text x="26.0474%" y="510.50">_call_..</text></g><g><title>forward (transformer_lens/components/layer_norm.py:56) (7 samples, 0.39%)</title><rect x="30.4421%" y="516" width="0.3917%" height="15" fill="rgb(222,148,37)" fg:x="544" fg:w="7"/><text x="30.6921%" y="526.50"></text></g><g><title>forward (mlp.py:38) (3 samples, 0.17%)</title><rect x="30.8338%" y="532" width="0.1679%" height="15" fill="rgb(234,67,33)" fg:x="551" fg:w="3"/><text x="31.0838%" y="542.50"></text></g><g><title>batch_addmm (transformer_lens/utilities/addmm.py:33) (3 samples, 0.17%)</title><rect x="30.8338%" y="548" width="0.1679%" height="15" fill="rgb(247,98,35)" fg:x="551" fg:w="3"/><text x="31.0838%" y="558.50"></text></g><g><title>vanilla_addmm (transformer_lens/utilities/addmm.py:18) (3 samples, 0.17%)</title><rect x="30.8338%" y="564" width="0.1679%" height="15" fill="rgb(247,138,52)" fg:x="551" fg:w="3"/><text x="31.0838%" y="574.50"></text></g><g><title>forward (mlp.py:48) (175 samples, 9.79%)</title><rect x="31.0017%" y="532" width="9.7929%" height="15" fill="rgb(213,79,30)" fg:x="554" fg:w="175"/><text x="31.2517%" y="542.50">forward (mlp.p..</text></g><g><title>forward (transformer_lens/components/transformer_block.py:194) (180 samples, 10.07%)</title><rect x="30.8338%" y="468" width="10.0727%" height="15" fill="rgb(246,177,23)" fg:x="551" fg:w="180"/><text x="31.0838%" y="478.50">forward (transf..</text></g><g><title>apply_mlp (transformer_lens/components/transformer_block.py:210) (180 samples, 10.07%)</title><rect x="30.8338%" y="484" width="10.0727%" height="15" fill="rgb(230,62,27)" fg:x="551" fg:w="180"/><text x="31.0838%" y="494.50">apply_mlp (tran..</text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1739) (180 samples, 10.07%)</title><rect x="30.8338%" y="500" width="10.0727%" height="15" fill="rgb(216,154,8)" fg:x="551" fg:w="180"/><text x="31.0838%" y="510.50">_wrapped_call_i..</text></g><g><title>_call_impl (torch/nn/modules/module.py:1750) (180 samples, 10.07%)</title><rect x="30.8338%" y="516" width="10.0727%" height="15" fill="rgb(244,35,45)" fg:x="551" fg:w="180"/><text x="31.0838%" y="526.50">_call_impl (tor..</text></g><g><title>forward (mlp.py:49) (2 samples, 0.11%)</title><rect x="40.7946%" y="532" width="0.1119%" height="15" fill="rgb(251,115,12)" fg:x="729" fg:w="2"/><text x="41.0446%" y="542.50"></text></g><g><title>_get_acts_HSPD (model_diffing/data/activation_harvester.py:59) (733 samples, 41.02%)</title><rect x="0.0000%" y="340" width="41.0185%" height="15" fill="rgb(240,54,50)" fg:x="0" fg:w="733"/><text x="0.2500%" y="350.50">_get_acts_HSPD (model_diffing/data/activation_harvester.py:59)</text></g><g><title>run_with_cache (transformer_lens/HookedTransformer.py:694) (733 samples, 41.02%)</title><rect x="0.0000%" y="356" width="41.0185%" height="15" fill="rgb(233,84,52)" fg:x="0" fg:w="733"/><text x="0.2500%" y="366.50">run_with_cache (transformer_lens/HookedTransformer.py:694)</text></g><g><title>run_with_cache (transformer_lens/hook_points.py:569) (730 samples, 40.85%)</title><rect x="0.1679%" y="372" width="40.8506%" height="15" fill="rgb(207,117,47)" fg:x="3" fg:w="730"/><text x="0.4179%" y="382.50">run_with_cache (transformer_lens/hook_points.py:569)</text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1739) (730 samples, 40.85%)</title><rect x="0.1679%" y="388" width="40.8506%" height="15" fill="rgb(249,43,39)" fg:x="3" fg:w="730"/><text x="0.4179%" y="398.50">_wrapped_call_impl (torch/nn/modules/module.py:1739)</text></g><g><title>_call_impl (torch/nn/modules/module.py:1750) (730 samples, 40.85%)</title><rect x="0.1679%" y="404" width="40.8506%" height="15" fill="rgb(209,38,44)" fg:x="3" fg:w="730"/><text x="0.4179%" y="414.50">_call_impl (torch/nn/modules/module.py:1750)</text></g><g><title>forward (transformer_lens/HookedTransformer.py:612) (727 samples, 40.68%)</title><rect x="0.3358%" y="420" width="40.6827%" height="15" fill="rgb(236,212,23)" fg:x="6" fg:w="727"/><text x="0.5858%" y="430.50">forward (transformer_lens/HookedTransformer.py:612)</text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1739) (727 samples, 40.68%)</title><rect x="0.3358%" y="436" width="40.6827%" height="15" fill="rgb(242,79,21)" fg:x="6" fg:w="727"/><text x="0.5858%" y="446.50">_wrapped_call_impl (torch/nn/modules/module.py:1739)</text></g><g><title>_call_impl (torch/nn/modules/module.py:1750) (727 samples, 40.68%)</title><rect x="0.3358%" y="452" width="40.6827%" height="15" fill="rgb(211,96,35)" fg:x="6" fg:w="727"/><text x="0.5858%" y="462.50">_call_impl (torch/nn/modules/module.py:1750)</text></g><g><title>forward (transformer_lens/components/transformer_block.py:196) (2 samples, 0.11%)</title><rect x="40.9065%" y="468" width="0.1119%" height="15" fill="rgb(253,215,40)" fg:x="731" fg:w="2"/><text x="41.1565%" y="478.50"></text></g><g><title>_activations_iterator_HsMPD (model_diffing/data/model_hookpoint_dataloader.py:60) (743 samples, 41.58%)</title><rect x="0.0000%" y="308" width="41.5781%" height="15" fill="rgb(211,81,21)" fg:x="0" fg:w="743"/><text x="0.2500%" y="318.50">_activations_iterator_HsMPD (model_diffing/data/model_hookpoint_data..</text></g><g><title>get_activations_HSMPD (model_diffing/data/activation_harvester.py:80) (743 samples, 41.58%)</title><rect x="0.0000%" y="324" width="41.5781%" height="15" fill="rgb(208,190,38)" fg:x="0" fg:w="743"/><text x="0.2500%" y="334.50">get_activations_HSMPD (model_diffing/data/activation_harvester.py:80)</text></g><g><title>_get_acts_HSPD (model_diffing/data/activation_harvester.py:65) (10 samples, 0.56%)</title><rect x="41.0185%" y="340" width="0.5596%" height="15" fill="rgb(235,213,38)" fg:x="733" fg:w="10"/><text x="41.2685%" y="350.50"></text></g><g><title>&lt;genexpr&gt; (model_diffing/data/model_hookpoint_dataloader.py:80) (951 samples, 53.22%)</title><rect x="0.0000%" y="292" width="53.2177%" height="15" fill="rgb(237,122,38)" fg:x="0" fg:w="951"/><text x="0.2500%" y="302.50">&lt;genexpr&gt; (model_diffing/data/model_hookpoint_dataloader.py:80)</text></g><g><title>_activations_iterator_HsMPD (model_diffing/data/model_hookpoint_dataloader.py:67) (207 samples, 11.58%)</title><rect x="41.6340%" y="308" width="11.5837%" height="15" fill="rgb(244,218,35)" fg:x="744" fg:w="207"/><text x="41.8840%" y="318.50">_activations_iter..</text></g><g><title>sample_BX (model_diffing/data/shuffle.py:47) (6 samples, 0.34%)</title><rect x="53.2177%" y="356" width="0.3358%" height="15" fill="rgb(240,68,47)" fg:x="951" fg:w="6"/><text x="53.4677%" y="366.50"></text></g><g><title>_activations_iterator_HsMPD (model_diffing/data/model_hookpoint_dataloader.py:59) (7 samples, 0.39%)</title><rect x="53.2177%" y="308" width="0.3917%" height="15" fill="rgb(210,16,53)" fg:x="951" fg:w="7"/><text x="53.4677%" y="318.50"></text></g><g><title>_get_sequences_batch_iterator (model_diffing/data/token_loader/huggingface.py:72) (7 samples, 0.39%)</title><rect x="53.2177%" y="324" width="0.3917%" height="15" fill="rgb(235,124,12)" fg:x="951" fg:w="7"/><text x="53.4677%" y="334.50"></text></g><g><title>batch_shuffle_tensor_iterator_BX (model_diffing/data/shuffle.py:68) (7 samples, 0.39%)</title><rect x="53.2177%" y="340" width="0.3917%" height="15" fill="rgb(224,169,11)" fg:x="951" fg:w="7"/><text x="53.4677%" y="350.50"></text></g><g><title>forward (transformer_lens/HookedTransformer.py:583) (8 samples, 0.45%)</title><rect x="53.6654%" y="420" width="0.4477%" height="15" fill="rgb(250,166,2)" fg:x="959" fg:w="8"/><text x="53.9154%" y="430.50"></text></g><g><title>input_to_embed (transformer_lens/HookedTransformer.py:376) (7 samples, 0.39%)</title><rect x="53.7213%" y="436" width="0.3917%" height="15" fill="rgb(242,216,29)" fg:x="960" fg:w="7"/><text x="53.9713%" y="446.50"></text></g><g><title>__len__ (transformers/tokenization_utils_fast.py:279) (7 samples, 0.39%)</title><rect x="53.7213%" y="452" width="0.3917%" height="15" fill="rgb(230,116,27)" fg:x="960" fg:w="7"/><text x="53.9713%" y="462.50"></text></g><g><title>forward (transformer_lens/components/abstract_attention.py:196) (2 samples, 0.11%)</title><rect x="54.1690%" y="516" width="0.1119%" height="15" fill="rgb(228,99,48)" fg:x="968" fg:w="2"/><text x="54.4190%" y="526.50"></text></g><g><title>apply_rotary (transformer_lens/components/abstract_attention.py:577) (75 samples, 4.20%)</title><rect x="54.2809%" y="532" width="4.1970%" height="15" fill="rgb(253,11,6)" fg:x="970" fg:w="75"/><text x="54.5309%" y="542.50">apply..</text></g><g><title>forward (transformer_lens/components/abstract_attention.py:207) (116 samples, 6.49%)</title><rect x="54.2809%" y="516" width="6.4913%" height="15" fill="rgb(247,143,39)" fg:x="970" fg:w="116"/><text x="54.5309%" y="526.50">forward (..</text></g><g><title>apply_rotary (transformer_lens/components/abstract_attention.py:585) (41 samples, 2.29%)</title><rect x="58.4779%" y="532" width="2.2943%" height="15" fill="rgb(236,97,10)" fg:x="1045" fg:w="41"/><text x="58.7279%" y="542.50">a..</text></g><g><title>forward (transformer_lens/components/abstract_attention.py:209) (4 samples, 0.22%)</title><rect x="60.7722%" y="516" width="0.2238%" height="15" fill="rgb(233,208,19)" fg:x="1086" fg:w="4"/><text x="61.0222%" y="526.50"></text></g><g><title>apply_rotary (transformer_lens/components/abstract_attention.py:585) (4 samples, 0.22%)</title><rect x="60.7722%" y="532" width="0.2238%" height="15" fill="rgb(216,164,2)" fg:x="1086" fg:w="4"/><text x="61.0222%" y="542.50"></text></g><g><title>forward (transformer_lens/components/abstract_attention.py:215) (10 samples, 0.56%)</title><rect x="60.9961%" y="516" width="0.5596%" height="15" fill="rgb(220,129,5)" fg:x="1090" fg:w="10"/><text x="61.2461%" y="526.50"></text></g><g><title>forward (transformer_lens/components/abstract_attention.py:217) (31 samples, 1.73%)</title><rect x="61.5557%" y="516" width="1.7348%" height="15" fill="rgb(242,17,10)" fg:x="1100" fg:w="31"/><text x="61.8057%" y="526.50"></text></g><g><title>calculate_attention_scores (transformer_lens/components/abstract_attention.py:419) (30 samples, 1.68%)</title><rect x="61.6116%" y="532" width="1.6788%" height="15" fill="rgb(242,107,0)" fg:x="1101" fg:w="30"/><text x="61.8616%" y="542.50"></text></g><g><title>forward (transformer_lens/components/abstract_attention.py:252) (10 samples, 0.56%)</title><rect x="63.2904%" y="516" width="0.5596%" height="15" fill="rgb(251,28,31)" fg:x="1131" fg:w="10"/><text x="63.5404%" y="526.50"></text></g><g><title>apply_causal_mask (transformer_lens/components/abstract_attention.py:479) (10 samples, 0.56%)</title><rect x="63.2904%" y="532" width="0.5596%" height="15" fill="rgb(233,223,10)" fg:x="1131" fg:w="10"/><text x="63.5404%" y="542.50"></text></g><g><title>forward (transformer_lens/components/abstract_attention.py:259) (7 samples, 0.39%)</title><rect x="63.8500%" y="516" width="0.3917%" height="15" fill="rgb(215,21,27)" fg:x="1141" fg:w="7"/><text x="64.1000%" y="526.50"></text></g><g><title>softmax (torch/nn/functional.py:2140) (7 samples, 0.39%)</title><rect x="63.8500%" y="532" width="0.3917%" height="15" fill="rgb(232,23,21)" fg:x="1141" fg:w="7"/><text x="64.1000%" y="542.50"></text></g><g><title>forward (transformer_lens/components/abstract_attention.py:260) (33 samples, 1.85%)</title><rect x="64.2417%" y="516" width="1.8467%" height="15" fill="rgb(244,5,23)" fg:x="1148" fg:w="33"/><text x="64.4917%" y="526.50">f..</text></g><g><title>forward (transformer_lens/components/abstract_attention.py:262) (26 samples, 1.45%)</title><rect x="66.0884%" y="516" width="1.4550%" height="15" fill="rgb(226,81,46)" fg:x="1181" fg:w="26"/><text x="66.3384%" y="526.50"></text></g><g><title>forward (transformer_lens/components/abstract_attention.py:264) (2 samples, 0.11%)</title><rect x="67.5993%" y="516" width="0.1119%" height="15" fill="rgb(247,70,30)" fg:x="1208" fg:w="2"/><text x="67.8493%" y="526.50"></text></g><g><title>calculate_z_scores (transformer_lens/components/abstract_attention.py:440) (2 samples, 0.11%)</title><rect x="67.5993%" y="532" width="0.1119%" height="15" fill="rgb(212,68,19)" fg:x="1208" fg:w="2"/><text x="67.8493%" y="542.50"></text></g><g><title>forward (transformer_lens/components/transformer_block.py:160) (251 samples, 14.05%)</title><rect x="54.1690%" y="468" width="14.0459%" height="15" fill="rgb(240,187,13)" fg:x="968" fg:w="251"/><text x="54.4190%" y="478.50">forward (transformer_..</text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1739) (251 samples, 14.05%)</title><rect x="54.1690%" y="484" width="14.0459%" height="15" fill="rgb(223,113,26)" fg:x="968" fg:w="251"/><text x="54.4190%" y="494.50">_wrapped_call_impl (t..</text></g><g><title>_call_impl (torch/nn/modules/module.py:1750) (251 samples, 14.05%)</title><rect x="54.1690%" y="500" width="14.0459%" height="15" fill="rgb(206,192,2)" fg:x="968" fg:w="251"/><text x="54.4190%" y="510.50">_call_impl (torch/nn/..</text></g><g><title>forward (transformer_lens/components/abstract_attention.py:291) (8 samples, 0.45%)</title><rect x="67.7672%" y="516" width="0.4477%" height="15" fill="rgb(241,108,4)" fg:x="1211" fg:w="8"/><text x="68.0172%" y="526.50"></text></g><g><title>forward (transformer_lens/components/layer_norm.py:49) (124 samples, 6.94%)</title><rect x="68.2149%" y="516" width="6.9390%" height="15" fill="rgb(247,173,49)" fg:x="1219" fg:w="124"/><text x="68.4649%" y="526.50">forward (..</text></g><g><title>forward (transformer_lens/components/layer_norm.py:51) (3 samples, 0.17%)</title><rect x="75.1539%" y="516" width="0.1679%" height="15" fill="rgb(224,114,35)" fg:x="1343" fg:w="3"/><text x="75.4039%" y="526.50"></text></g><g><title>forward (transformer_lens/components/layer_norm.py:53) (2 samples, 0.11%)</title><rect x="75.3218%" y="516" width="0.1119%" height="15" fill="rgb(245,159,27)" fg:x="1346" fg:w="2"/><text x="75.5718%" y="526.50"></text></g><g><title>forward (transformer_lens/components/transformer_block.py:161) (143 samples, 8.00%)</title><rect x="68.2149%" y="468" width="8.0022%" height="15" fill="rgb(245,172,44)" fg:x="1219" fg:w="143"/><text x="68.4649%" y="478.50">forward (tr..</text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1739) (143 samples, 8.00%)</title><rect x="68.2149%" y="484" width="8.0022%" height="15" fill="rgb(236,23,11)" fg:x="1219" fg:w="143"/><text x="68.4649%" y="494.50">_wrapped_ca..</text></g><g><title>_call_impl (torch/nn/modules/module.py:1750) (143 samples, 8.00%)</title><rect x="68.2149%" y="500" width="8.0022%" height="15" fill="rgb(205,117,38)" fg:x="1219" fg:w="143"/><text x="68.4649%" y="510.50">_call_impl ..</text></g><g><title>forward (transformer_lens/components/layer_norm.py:56) (13 samples, 0.73%)</title><rect x="75.4896%" y="516" width="0.7275%" height="15" fill="rgb(237,72,25)" fg:x="1349" fg:w="13"/><text x="75.7396%" y="526.50"></text></g><g><title>forward (transformer_lens/components/layer_norm.py:49) (3 samples, 0.17%)</title><rect x="76.2171%" y="516" width="0.1679%" height="15" fill="rgb(244,70,9)" fg:x="1362" fg:w="3"/><text x="76.4671%" y="526.50"></text></g><g><title>forward (transformer_lens/components/layer_norm.py:53) (4 samples, 0.22%)</title><rect x="76.3850%" y="516" width="0.2238%" height="15" fill="rgb(217,125,39)" fg:x="1365" fg:w="4"/><text x="76.6350%" y="526.50"></text></g><g><title>forward (transformer_lens/components/transformer_block.py:163) (12 samples, 0.67%)</title><rect x="76.2171%" y="468" width="0.6715%" height="15" fill="rgb(235,36,10)" fg:x="1362" fg:w="12"/><text x="76.4671%" y="478.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1739) (12 samples, 0.67%)</title><rect x="76.2171%" y="484" width="0.6715%" height="15" fill="rgb(251,123,47)" fg:x="1362" fg:w="12"/><text x="76.4671%" y="494.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1750) (12 samples, 0.67%)</title><rect x="76.2171%" y="500" width="0.6715%" height="15" fill="rgb(221,13,13)" fg:x="1362" fg:w="12"/><text x="76.4671%" y="510.50"></text></g><g><title>forward (transformer_lens/components/layer_norm.py:56) (5 samples, 0.28%)</title><rect x="76.6088%" y="516" width="0.2798%" height="15" fill="rgb(238,131,9)" fg:x="1369" fg:w="5"/><text x="76.8588%" y="526.50"></text></g><g><title>forward (transformer_lens/components/layer_norm.py:49) (2 samples, 0.11%)</title><rect x="76.9446%" y="516" width="0.1119%" height="15" fill="rgb(211,50,8)" fg:x="1375" fg:w="2"/><text x="77.1946%" y="526.50"></text></g><g><title>forward (transformer_lens/components/layer_norm.py:53) (4 samples, 0.22%)</title><rect x="77.0565%" y="516" width="0.2238%" height="15" fill="rgb(245,182,24)" fg:x="1377" fg:w="4"/><text x="77.3065%" y="526.50"></text></g><g><title>forward (transformer_lens/components/transformer_block.py:165) (13 samples, 0.73%)</title><rect x="76.9446%" y="468" width="0.7275%" height="15" fill="rgb(242,14,37)" fg:x="1375" fg:w="13"/><text x="77.1946%" y="478.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1739) (13 samples, 0.73%)</title><rect x="76.9446%" y="484" width="0.7275%" height="15" fill="rgb(246,228,12)" fg:x="1375" fg:w="13"/><text x="77.1946%" y="494.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1750) (13 samples, 0.73%)</title><rect x="76.9446%" y="500" width="0.7275%" height="15" fill="rgb(213,55,15)" fg:x="1375" fg:w="13"/><text x="77.1946%" y="510.50"></text></g><g><title>forward (transformer_lens/components/layer_norm.py:56) (6 samples, 0.34%)</title><rect x="77.3363%" y="516" width="0.3358%" height="15" fill="rgb(209,9,3)" fg:x="1382" fg:w="6"/><text x="77.5863%" y="526.50"></text></g><g><title>forward (transformer_lens/components/layer_norm.py:51) (52 samples, 2.91%)</title><rect x="77.7280%" y="516" width="2.9099%" height="15" fill="rgb(230,59,30)" fg:x="1389" fg:w="52"/><text x="77.9780%" y="526.50">fo..</text></g><g><title>forward (transformer_lens/components/transformer_block.py:192) (61 samples, 3.41%)</title><rect x="77.7280%" y="468" width="3.4135%" height="15" fill="rgb(209,121,21)" fg:x="1389" fg:w="61"/><text x="77.9780%" y="478.50">for..</text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1739) (61 samples, 3.41%)</title><rect x="77.7280%" y="484" width="3.4135%" height="15" fill="rgb(220,109,13)" fg:x="1389" fg:w="61"/><text x="77.9780%" y="494.50">_wr..</text></g><g><title>_call_impl (torch/nn/modules/module.py:1750) (61 samples, 3.41%)</title><rect x="77.7280%" y="500" width="3.4135%" height="15" fill="rgb(232,18,1)" fg:x="1389" fg:w="61"/><text x="77.9780%" y="510.50">_ca..</text></g><g><title>forward (transformer_lens/components/layer_norm.py:56) (8 samples, 0.45%)</title><rect x="80.6939%" y="516" width="0.4477%" height="15" fill="rgb(215,41,42)" fg:x="1442" fg:w="8"/><text x="80.9439%" y="526.50"></text></g><g><title>forward (transformer_lens/components/transformer_block.py:194) (139 samples, 7.78%)</title><rect x="81.1416%" y="468" width="7.7784%" height="15" fill="rgb(224,123,36)" fg:x="1450" fg:w="139"/><text x="81.3916%" y="478.50">forward (tr..</text></g><g><title>apply_mlp (transformer_lens/components/transformer_block.py:210) (139 samples, 7.78%)</title><rect x="81.1416%" y="484" width="7.7784%" height="15" fill="rgb(240,125,3)" fg:x="1450" fg:w="139"/><text x="81.3916%" y="494.50">apply_mlp (..</text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1739) (139 samples, 7.78%)</title><rect x="81.1416%" y="500" width="7.7784%" height="15" fill="rgb(205,98,50)" fg:x="1450" fg:w="139"/><text x="81.3916%" y="510.50">_wrapped_ca..</text></g><g><title>_call_impl (torch/nn/modules/module.py:1750) (139 samples, 7.78%)</title><rect x="81.1416%" y="516" width="7.7784%" height="15" fill="rgb(205,185,37)" fg:x="1450" fg:w="139"/><text x="81.3916%" y="526.50">_call_impl ..</text></g><g><title>forward (mlp.py:48) (138 samples, 7.72%)</title><rect x="81.1975%" y="532" width="7.7224%" height="15" fill="rgb(238,207,15)" fg:x="1451" fg:w="138"/><text x="81.4475%" y="542.50">forward (ml..</text></g><g><title>_get_acts_HSPD (model_diffing/data/activation_harvester.py:59) (635 samples, 35.53%)</title><rect x="53.6094%" y="340" width="35.5344%" height="15" fill="rgb(213,199,42)" fg:x="958" fg:w="635"/><text x="53.8594%" y="350.50">_get_acts_HSPD (model_diffing/data/activation_harvester.py..</text></g><g><title>run_with_cache (transformer_lens/HookedTransformer.py:694) (635 samples, 35.53%)</title><rect x="53.6094%" y="356" width="35.5344%" height="15" fill="rgb(235,201,11)" fg:x="958" fg:w="635"/><text x="53.8594%" y="366.50">run_with_cache (transformer_lens/HookedTransformer.py:694)</text></g><g><title>run_with_cache (transformer_lens/hook_points.py:569) (634 samples, 35.48%)</title><rect x="53.6654%" y="372" width="35.4785%" height="15" fill="rgb(207,46,11)" fg:x="959" fg:w="634"/><text x="53.9154%" y="382.50">run_with_cache (transformer_lens/hook_points.py:569)</text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1739) (634 samples, 35.48%)</title><rect x="53.6654%" y="388" width="35.4785%" height="15" fill="rgb(241,35,35)" fg:x="959" fg:w="634"/><text x="53.9154%" y="398.50">_wrapped_call_impl (torch/nn/modules/module.py:1739)</text></g><g><title>_call_impl (torch/nn/modules/module.py:1750) (634 samples, 35.48%)</title><rect x="53.6654%" y="404" width="35.4785%" height="15" fill="rgb(243,32,47)" fg:x="959" fg:w="634"/><text x="53.9154%" y="414.50">_call_impl (torch/nn/modules/module.py:1750)</text></g><g><title>forward (transformer_lens/HookedTransformer.py:612) (626 samples, 35.03%)</title><rect x="54.1130%" y="420" width="35.0308%" height="15" fill="rgb(247,202,23)" fg:x="967" fg:w="626"/><text x="54.3630%" y="430.50">forward (transformer_lens/HookedTransformer.py:612)</text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1739) (625 samples, 34.97%)</title><rect x="54.1690%" y="436" width="34.9748%" height="15" fill="rgb(219,102,11)" fg:x="968" fg:w="625"/><text x="54.4190%" y="446.50">_wrapped_call_impl (torch/nn/modules/module.py:1739)</text></g><g><title>_call_impl (torch/nn/modules/module.py:1750) (625 samples, 34.97%)</title><rect x="54.1690%" y="452" width="34.9748%" height="15" fill="rgb(243,110,44)" fg:x="968" fg:w="625"/><text x="54.4190%" y="462.50">_call_impl (torch/nn/modules/module.py:1750)</text></g><g><title>forward (transformer_lens/components/transformer_block.py:196) (4 samples, 0.22%)</title><rect x="88.9200%" y="468" width="0.2238%" height="15" fill="rgb(222,74,54)" fg:x="1589" fg:w="4"/><text x="89.1700%" y="478.50"></text></g><g><title>_activations_iterator_HsMPD (model_diffing/data/model_hookpoint_dataloader.py:60) (655 samples, 36.65%)</title><rect x="53.6094%" y="308" width="36.6536%" height="15" fill="rgb(216,99,12)" fg:x="958" fg:w="655"/><text x="53.8594%" y="318.50">_activations_iterator_HsMPD (model_diffing/data/model_hookpo..</text></g><g><title>get_activations_HSMPD (model_diffing/data/activation_harvester.py:80) (655 samples, 36.65%)</title><rect x="53.6094%" y="324" width="36.6536%" height="15" fill="rgb(226,22,26)" fg:x="958" fg:w="655"/><text x="53.8594%" y="334.50">get_activations_HSMPD (model_diffing/data/activation_harvest..</text></g><g><title>_get_acts_HSPD (model_diffing/data/activation_harvester.py:65) (20 samples, 1.12%)</title><rect x="89.1438%" y="340" width="1.1192%" height="15" fill="rgb(217,163,10)" fg:x="1593" fg:w="20"/><text x="89.3938%" y="350.50"></text></g><g><title>&lt;module&gt; (model_diffing/scripts/no_bias_jr/run.py:88) (1,785 samples, 99.89%)</title><rect x="0.0000%" y="68" width="99.8881%" height="15" fill="rgb(213,25,53)" fg:x="0" fg:w="1785"/><text x="0.2500%" y="78.50">&lt;module&gt; (model_diffing/scripts/no_bias_jr/run.py:88)</text></g><g><title>Fire (fire/core.py:135) (1,785 samples, 99.89%)</title><rect x="0.0000%" y="84" width="99.8881%" height="15" fill="rgb(252,105,26)" fg:x="0" fg:w="1785"/><text x="0.2500%" y="94.50">Fire (fire/core.py:135)</text></g><g><title>_Fire (fire/core.py:468) (1,785 samples, 99.89%)</title><rect x="0.0000%" y="100" width="99.8881%" height="15" fill="rgb(220,39,43)" fg:x="0" fg:w="1785"/><text x="0.2500%" y="110.50">_Fire (fire/core.py:468)</text></g><g><title>_CallAndUpdateTrace (fire/core.py:684) (1,785 samples, 99.89%)</title><rect x="0.0000%" y="116" width="99.8881%" height="15" fill="rgb(229,68,48)" fg:x="0" fg:w="1785"/><text x="0.2500%" y="126.50">_CallAndUpdateTrace (fire/core.py:684)</text></g><g><title>inner (model_diffing/scripts/base_trainer.py:258) (1,785 samples, 99.89%)</title><rect x="0.0000%" y="132" width="99.8881%" height="15" fill="rgb(252,8,32)" fg:x="0" fg:w="1785"/><text x="0.2500%" y="142.50">inner (model_diffing/scripts/base_trainer.py:258)</text></g><g><title>build_trainer (model_diffing/scripts/no_bias_jr/run.py:48) (1,785 samples, 99.89%)</title><rect x="0.0000%" y="148" width="99.8881%" height="15" fill="rgb(223,20,43)" fg:x="0" fg:w="1785"/><text x="0.2500%" y="158.50">build_trainer (model_diffing/scripts/no_bias_jr/run.py:48)</text></g><g><title>build_dataloader (model_diffing/data/model_hookpoint_dataloader.py:133) (1,785 samples, 99.89%)</title><rect x="0.0000%" y="164" width="99.8881%" height="15" fill="rgb(229,81,49)" fg:x="0" fg:w="1785"/><text x="0.2500%" y="174.50">build_dataloader (model_diffing/data/model_hookpoint_dataloader.py:133)</text></g><g><title>__init__ (model_diffing/data/model_hookpoint_dataloader.py:42) (1,785 samples, 99.89%)</title><rect x="0.0000%" y="180" width="99.8881%" height="15" fill="rgb(236,28,36)" fg:x="0" fg:w="1785"/><text x="0.2500%" y="190.50">__init__ (model_diffing/data/model_hookpoint_dataloader.py:42)</text></g><g><title>estimate_norm_scaling_factor_X (model_diffing/scripts/utils.py:131) (1,785 samples, 99.89%)</title><rect x="0.0000%" y="196" width="99.8881%" height="15" fill="rgb(249,185,26)" fg:x="0" fg:w="1785"/><text x="0.2500%" y="206.50">estimate_norm_scaling_factor_X (model_diffing/scripts/utils.py:131)</text></g><g><title>_estimate_mean_norms_X (model_diffing/scripts/utils.py:146) (1,785 samples, 99.89%)</title><rect x="0.0000%" y="212" width="99.8881%" height="15" fill="rgb(249,174,33)" fg:x="0" fg:w="1785"/><text x="0.2500%" y="222.50">_estimate_mean_norms_X (model_diffing/scripts/utils.py:146)</text></g><g><title>__iter__ (tqdm/std.py:1181) (1,785 samples, 99.89%)</title><rect x="0.0000%" y="228" width="99.8881%" height="15" fill="rgb(233,201,37)" fg:x="0" fg:w="1785"/><text x="0.2500%" y="238.50">__iter__ (tqdm/std.py:1181)</text></g><g><title>&lt;genexpr&gt; (model_diffing/data/model_hookpoint_dataloader.py:43) (1,785 samples, 99.89%)</title><rect x="0.0000%" y="244" width="99.8881%" height="15" fill="rgb(221,78,26)" fg:x="0" fg:w="1785"/><text x="0.2500%" y="254.50">&lt;genexpr&gt; (model_diffing/data/model_hookpoint_dataloader.py:43)</text></g><g><title>_activations_iterator_BMPD (model_diffing/data/model_hookpoint_dataloader.py:77) (1,785 samples, 99.89%)</title><rect x="0.0000%" y="260" width="99.8881%" height="15" fill="rgb(250,127,30)" fg:x="0" fg:w="1785"/><text x="0.2500%" y="270.50">_activations_iterator_BMPD (model_diffing/data/model_hookpoint_dataloader.py:77)</text></g><g><title>change_batch_size_BX (model_diffing/utils.py:366) (1,785 samples, 99.89%)</title><rect x="0.0000%" y="276" width="99.8881%" height="15" fill="rgb(230,49,44)" fg:x="0" fg:w="1785"/><text x="0.2500%" y="286.50">change_batch_size_BX (model_diffing/utils.py:366)</text></g><g><title>&lt;genexpr&gt; (model_diffing/data/model_hookpoint_dataloader.py:83) (834 samples, 46.67%)</title><rect x="53.2177%" y="292" width="46.6704%" height="15" fill="rgb(229,67,23)" fg:x="951" fg:w="834"/><text x="53.4677%" y="302.50">&lt;genexpr&gt; (model_diffing/data/model_hookpoint_dataloader.py:83)</text></g><g><title>_activations_iterator_HsMPD (model_diffing/data/model_hookpoint_dataloader.py:67) (172 samples, 9.63%)</title><rect x="90.2630%" y="308" width="9.6251%" height="15" fill="rgb(249,83,47)" fg:x="1613" fg:w="172"/><text x="90.5130%" y="318.50">_activations_i..</text></g><g><title>all (1,787 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(215,43,3)" fg:x="0" fg:w="1787"/><text x="0.2500%" y="62.50"></text></g><g><title>_bootstrap (threading.py:1030) (2 samples, 0.11%)</title><rect x="99.8881%" y="68" width="0.1119%" height="15" fill="rgb(238,154,13)" fg:x="1785" fg:w="2"/><text x="100.1381%" y="78.50"></text></g><g><title>_bootstrap_inner (threading.py:1073) (2 samples, 0.11%)</title><rect x="99.8881%" y="84" width="0.1119%" height="15" fill="rgb(219,56,2)" fg:x="1785" fg:w="2"/><text x="100.1381%" y="94.50"></text></g></svg></svg>